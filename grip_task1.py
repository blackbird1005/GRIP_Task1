# -*- coding: utf-8 -*-
"""GRIP_Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1khVtQ90ZYO2lLVgyB5Tib0UIUfEcKmH-

Import the required libraries like numpy, panda and matplotlis for statistical anlysis and visal representation.
"""

# Commented out IPython magic to ensure Python compatibility.
#import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""Loading data from the remote link """

student_data=pd.read_csv('http://bit.ly/w-data')
student_data

"""Analysis of the data"""

student_data.describe()

"""Shape and function is used to know the number of rows and columns in the data set. """

student_data.shape
(25,2)

"""Plot the data point to see if there is relation between rows and coloums in data set"""

#plottig the distribution 
student_data.plot(x='Hours', y='Scores' , style='o')
plt.title ('Hours vs Percentage')
plt.xlabel ('Hours Studied')
plt.ylabel ('Percentage Score')
plt.show()

"""From the scattered plot, we can conclude there is a positive relation between 'Hours Studied' and 'Percentage score'
Now we will plot regression line for this correlation.
We also split the data into traning and test sets. 
"""

from sklearn.model_selection import train_test_split
X = student_data.iloc[:, :-1].values
Y = student_data.iloc[:, 1].values
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.25, random_state=0)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)

"""We train the model and then fit it on the data set"""

from sklearn.linear_model import LinearRegression
lin_model = LinearRegression()
lin_model.fit(X_train, Y_train)

"""Plotting Regression Line for the test set

"""

# Plotting the regression line
line = lin_model.coef_*X + lin_model.intercept_

# Plotting for the test data
plt.scatter(X, Y)
plt.title( 'Regression Line') 
plt.plot(X, line);
plt.show()

"""Making Predictions """

print(X_test)
Y_test_predict = lin_model.predict(X_test)

"""Comparing actual vs predicton"""

df1 = pd.DataFrame({'ACTUAL':Y_test, 'PREDICTED' :Y_test_predict})
df1

"""Evaluating the model

"""

#for training data
from sklearn.metrics import mean_absolute_error

#for testing data
mae = mean_absolute_error(Y_test, Y_test_predict)

print("Mean absolute error: ")
print('mea is {}'.format(mae))

"""Now that the estimated error is 4.1408. The chances of error through the model are low. """

plt.figure(figsize= (5,5))
plt.scatter(Y_test,Y_test_predict)
plt.plot([min (Y_test_predict),max(Y_test_predict)], [min(Y_test),max(Y_test)])
plt.xlabel('Actual')
plt.ylabel('Predict')

"""We then will predict the score of the student who studied for **9.25 hours/day**"""

#solution
predicted_score = lin_model.predict([[9.25]])
print ('The predicted score for 9.25 study hours is' ,predicted_score)

"""The following prediction concludes, those student who study for **9.25 hours per day**, they are likely to **score 93.89%**"""